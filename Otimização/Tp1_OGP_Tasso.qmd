---
title: "Laboratório de OGP 1: Implementação de modelos"
author: Tasso Augusto Tomaz Pimenta 2021072198
format: pdf
---
```{python}
from mip import Model, xsum, minimize, CBC, OptimizationStatus, BINARY, maximize
from itertools import product
import matplotlib.pyplot as plt
from math import sqrt
import numpy as np
import time

```

# 1. Problema de localização de facilidades
## https://resources.mpi-inf.mpg.de/departments/d1/projects/benchmarks/UflLib/BildeKrarup.html
```{python}
def facilidades(filename: str):
    with open(filename, 'r') as file:
        lines = file.readlines()
    header = lines[1].strip().split()
    nj = int(header[0])
    ni = int(header[1])
    f = []
    c = []
    #print(nj,ni)
    for line in lines[2:]:
        parts = line.strip().split()
        f.append(float(parts[1]))
        c.append([float(cost) for cost in parts[2:]])
    I, J = range(ni), range(nj)
    if len(f) != nj:
        raise ValueError("Dimensões das listas 'f'' não correspondem ao esperado.")
    if any(len(row) != ni for row in c):
        raise ValueError("Dimensões das listas 'c' não correspondem ao esperado.")
    
    model = Model('Problema de Localizacao', solver_name=CBC)
    model.verbose = 0
    
    y = [model.add_var(var_type=BINARY) for j in J]
    x = {(i, j): model.add_var(lb=0.0) for j in J for i in I}
    
    model.objective = minimize(xsum(f[j] * y[j] for j in J) + xsum(c[j][i] * x[i, j] for (i, j) in product(I, J)))
    
    for i in I:
        model += xsum(x[i, j] for j in J) == 1
    for (i, j) in product(I, J):
        model += x[i, j] <= y[j]
    
    start_time = time.time()
    status = model.optimize()
    end_time = time.time()
    
    elapsed_time = end_time - start_time    
    if status == OptimizationStatus.OPTIMAL:
        print("Custo total de instalacao: {:12.2f}".format(sum([y[j].x * f[j] for j in J])))
        print("Custo total de transporte: {:12.2f} ".format(sum([x[i, j].x * c[j][i] for (i, j) in product(I, J)])))
        print("Custo total : {:12.2f}.".format(model.objective_value))
        print("Tempo de resolução: {:.2f} segundos".format(elapsed_time))
        print("facilidades : demanda : clientes ")
        for j in J:
            if y[j].x > 1e-6:
                print("{:11d} : {:7.0f} : ".format(j + 1, sum([x[i, j].x for i in I])), end=' ')
                for i in I:
                    if x[i, j].x > 1e-6:
                        print("{:d}".format(i + 1), end=' ')
                print()
    else: print('fail')
```

```{python}
def open_file(file_list_path: str,path:str):
    with open(file_list_path) as file:
        filenames = file.readlines()
    it = 0
    for filename in filenames:
        if it == 2:break
        it +=1#ler só os primeiros 2 
        filename = f'{path}\\{filename.strip()}'
        if filename:  # Ensure the line is not empty
            facilidades(filename)
open_file(r'BildeKrarup\C\files.lst','BildeKrarup\\C')
# https://resources.mpi-inf.mpg.de/departments/d1/projects/benchmarks/UflLib/BildeKrarup.html
```
# 2. Problema de atribuição generalizada
## https://people.brunel.ac.uk/~mastjjb/jeb/orlib/gapinfo.html
```{python}
def atribuicao(m:int,n:int,bi:list,aij:list,cij:list):
    M = range(1, m + 1)  # Conjunto de funcionários
    N = range(1, n + 1)  # Conjunto de tarefas
    model = Model('Alocacao de Tarefas', solver_name=CBC)
    model.verbose = 0
    x = [[model.add_var(var_type=BINARY) for j in N] for i in M]

    model.objective =maximize( xsum(cij[i-1][j-1] * x[i-1][j-1] for i in M for j in N))
    for j in N:
        model += xsum(x[i-1][j-1] for i in M) == 1
    for i in M:
        model += xsum(aij[i-1][j-1] * x[i-1][j-1] for j in N) <= bi[i-1]
    status = model.optimize()

    if status == OptimizationStatus.OPTIMAL:
        print("Custo total de atribuição: {:12.2f}".format(model.objective_value))
        print("Atribuições:")
        for i in M:
            tarefas = []
            for j in N:
                if x[i-1][j-1].x >= 0.99:  
                    tarefas.append(j)
            print(f"Funcionário {i} -> Tarefas: {', '.join(map(str, tarefas))}")
    else:
        print("Não foi encontrada uma solução ótima.")
```
```{python}
def open_atri(file_list_path):
    with open(file_list_path) as file:
        filenames = file.readlines()
    for filename in filenames:
        print('\n',filename)
        with open(f'{filename.strip()}.txt', 'r') as file:
            lines = file.readlines()
        p = int(lines[0].strip().split()[0])
        index = 1
        for _ in range(p):
            if _ == 2: break # só mostrar as duas primeiras daa
            m, n = map(int, lines[index].strip().split())
            index += 1
            c_elements = []
            aij_elements = []
            while len(c_elements) < m * n:
                c_elements.extend(map(int, lines[index].strip().split()))
                index += 1
            while len(aij_elements) < n * m:
                aij_elements.extend(map(int, lines[index].strip().split()))
                index += 1
            c = [c_elements[i * n:(i + 1) * n] for i in range(m)]
            a = [aij_elements[i * n:(i + 1) * n] for i in range(m)]
            b = list(map(int, lines[index].strip().split()))
            index += 1
            atribuicao(m, n, b, a, c)
open_atri(r'gap\files.lst')
```
# 3. Problema do caixeiro viajante\n
```{python}
def tsp(n:int,cij:list):
    model = Model('Caixeiro Viajante', solver_name=CBC)
    model.verbose = 0

    A = [(i, j) for i in range(n) for j in range(n) if i != j]
    x = { (i, j): model.add_var(var_type=BINARY) for i, j in A }
    f = { (i, j): model.add_var() for i, j in A }

    # Objective function: minimize total travel cost
    model.objective = xsum(cij[i][j] * x[i, j] for i, j in A)

    N = range(n)  

    for i in N:
        if i != 0:
            #so troquei i por j aqui porque causa dor for com i in N
            model += xsum(f[j, i] for j in N if i != j) - xsum(f[i, j] for j in N if i != j) == 1
            model += xsum(x[j, i] for j in N if i != j) == 1
            model += xsum(x[i, j] for j in N if i != j) == 1

    model += xsum(f[0, j] for j in N if j != 0) == n - 1

    for i, j in A:
        model += f[i, j] <= (n - 1) * x[i, j]

    start_time = time.time()
    status = model.optimize()
    end_time = time.time()
    
    elapsed_time = end_time - start_time    

    if status == OptimizationStatus.OPTIMAL:
        print("Custo total de viagem: {:12.2f}".format(model.objective_value))
        print("Tempo de resolução: {:.2f} segundos".format(elapsed_time))
        print("Rota:")
        current_city = 0
        route = [current_city]
        while len(route) < n:
            for j in range(n):
                if j != current_city and x[current_city, j].x >= 0.99:
                    route.append(j)
                    current_city = j
                    break
        for i in range(len(route) - 1):
            print(f"De {route[i]:2d} para {route[i + 1]:2d}")
        print(f"De {route[-1]:2d} para {route[0]:2d}")
    else:
        print("Não foi encontrada uma solução ótima.")
```
#
```{python}

def parse_tsp_data(filename: str):
    with open(filename, 'r') as file:
        lines = file.readlines()
    dimension = 0
    coordinates = []
    for line in lines:
        if line.startswith("DIMENSION"):
            dimension = int(line.split(":")[1].strip())
        elif line.startswith("NODE_COORD_SECTION"):
            start = "NODE_COORD_SECTION\n"
            break 
        elif line.startswith("DISPLAY_DATA_SECTION"):
            start = "DISPLAY_DATA_SECTION\n"
            break
    coord_start_index = lines.index(start) + 1
    for i in range(coord_start_index, coord_start_index + dimension):
        parts = lines[i].strip().split()
        x = float(parts[1])
        y = float(parts[2])
        coordinates.append((x, y))
    c = [[0] * dimension for _ in range(dimension)]
    for i in range(dimension):
        for j in range(dimension):
            if i == j:
                c[i][j] = 0
            else:
                x1, y1 = coordinates[i]
                x2, y2 = coordinates[j]
                c[i][j] = round(sqrt((x2 - x1)**2 + (y2 - y1)**2))
    return dimension, c

# Exemplo de uso
file1 =r'tsp\burma14.tsp'
file2 = r'tsp\bays29.tsp'
n, cij = parse_tsp_data(file1)
n2,cij2 = parse_tsp_data(file2)
tsp(n, cij)
tsp(n2,cij2)
```