O valgrind acusa erro de memoria na linha 13
de tamanho 8 e escrita 4, e uma memoria não alocada ou liberada.
basicamente o que está acontecendo é que o codigo está definindo o ponteiro
para a matriz sem definir o endereço de memoria para onde aponta.
ao corrigir isso e rodar novamente o valgrind acusa erro na linha 18.
e novamente eu estou liberando uma memoria não alocada, uso o * para text
sem definir a memoria em que está apontando, alem de 6 alocações e 2 frees
ou seja vazamento de memoria
==9654==    definitely lost: 64 bytes in 4 blocks

a correção é alocar a memoria corretamente para cada ponteiro e liberação correta
==5969== Memcheck, a memory error detector
==5969== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5969== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==5969== Command: ./c4
==5969== 
==5969== Use of uninitialised value of size 8
==5969==    at 0x10917A: main (c4.c:13)
==5969== 
==5969== Invalid write of size 4
==5969==    at 0x10917A: main (c4.c:13)
==5969==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5969== 
==5969== 
==5969== Process terminating with default action of signal 11 (SIGSEGV)
==5969==  Access not within mapped region at address 0x0
==5969==    at 0x10917A: main (c4.c:13)
==5969==  If you believe this happened as a result of a stack
==5969==  overflow in your program's main thread (unlikely but
==5969==  possible), you can try to increase the size of the
==5969==  main thread stack using the --main-stacksize= flag.
==5969==  The main thread stack size used in this run was 8388608.
==5969== 
==5969== HEAP SUMMARY:
==5969==     in use at exit: 0 bytes in 0 blocks
==5969==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==5969== 
==5969== All heap blocks were freed -- no leaks are possible
==5969== 
==5969== Use --track-origins=yes to see where uninitialised values come from
==5969== For lists of detected and suppressed errors, rerun with: -s
==5969== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

==9654== Memcheck, a memory error detector
==9654== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9654== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==9654== Command: ./c4
==9654== 
==9654== Conditional jump or move depends on uninitialised value(s)
==9654==    at 0x484B235: free (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==9654==    by 0x109209: main (c4.c:18)
==9654== 
==9654== 
==9654== HEAP SUMMARY:
==9654==     in use at exit: 64 bytes in 4 blocks
==9654==   total heap usage: 6 allocs, 2 frees, 112 bytes allocated
==9654== 
==9654== 64 bytes in 4 blocks are definitely lost in loss record 1 of 1
==9654==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==9654==    by 0x1091EB: main (c4.c:17)
==9654== 
==9654== LEAK SUMMARY:
==9654==    definitely lost: 64 bytes in 4 blocks
==9654==    indirectly lost: 0 bytes in 0 blocks
==9654==      possibly lost: 0 bytes in 0 blocks
==9654==    still reachable: 0 bytes in 0 blocks
==9654==         suppressed: 0 bytes in 0 blocks
==9654== 
==9654== Use --track-origins=yes to see where uninitialised values come from
==9654== For lists of detected and suppressed errors, rerun with: -s
==9654== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
